from django.contrib.auth.decorators import login_required
from django.shortcuts import render
from django.http import JsonResponse
from myapp.models import *
import google.generativeai as genai
from .common import get_data, EntityType
from django.conf import settings
import json


GEMINI_API_KEY = settings.GEMINI_API_KEY
GEMINI_MODEL = "gemini-1.5-flash-8b"

CURRENT_REQUEST = None

COVER_LETTER_DATA = {
    "name": "Example AI Cover Letter",
    "purpose": "To demonstrate how a cover letter could be generated using AI",
    "text": "The text body of the cover letter would be here, generated by AI and tailored to the job or description you provided",
}

@login_required
def ai_add_cover_letter_workflow(request):
    if request.method != 'POST':
        return JsonResponse({"error": "Invalid request type, must be POST"})

    print("Add coverletter called")

    global CURRENT_REQUEST

    CURRENT_REQUEST = request

    cover_letter_description = request.POST.get("cover_letter_description")

    # If request.POST is empty or cover_letter_description is not found, check the JSON body
    if not cover_letter_description:
        try:
            body = json.loads(request.body)
            cover_letter_description = body.get("cover_letter_description")
        except json.JSONDecodeError:
            return JsonResponse({"error": "Invalid JSON format"}, status=400)

    print(cover_letter_description)

    # Check if cover_letter_description is still missing
    if not cover_letter_description:
        return JsonResponse({"error": "cover_letter_description is missing"}, status=400)


    # Define the AI's functions
    ai_tools = [
        set_cover_letter_name_and_purpose,
        set_cover_letter_text
    ]

    # Initialize the AI chat
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel(model_name=GEMINI_MODEL, tools=ai_tools)
    chat = model.start_chat(enable_automatic_function_calling=True)

    # Step 1: Set Cover Letter Name and Purpose
    next_command = f"""
        This is an automated process to walk you through creating a cover letter. 
        Follow resume best practices. 
        Do not hallucinate information. 
        Do not call a function you are not explicitly asked to call. 

        This is a description of the purpose of the cover letter. It could also be a job description, 
        in that case you should assume the cover letter's purpose is to be tailored to that job:

        {cover_letter_description} 

        Call the 'set_cover_letter_name_and_purpose' function to define the name and purpose of this cover letter.
    """
    response = chat.send_message(next_command)

    # Step 2: Plan the Cover Letter
    user_info = get_data(CURRENT_REQUEST, EntityType.USER)
    user_education = get_data(CURRENT_REQUEST, EntityType.EDUCATION)
    user_work_experience = get_data(CURRENT_REQUEST, EntityType.WORK_EXPERIENCE)
    user_skills = get_data(CURRENT_REQUEST, EntityType.SKILLS)
    user_projects = get_data(CURRENT_REQUEST, EntityType.PROJECTS)
    user_certifications = get_data(CURRENT_REQUEST, EntityType.CERTIFICATIONS)

    next_command = f"""
        Here is all the information you need to know about the person you are completing this cover letter for. 

        Personal Information: 
        {user_info} 

        Education: 
        {user_education} 

        Work Experience: 
        {user_work_experience}

        Skills: 
        {user_skills}

        Projects: 
        {user_projects} 

        Certifications: 
        {user_certifications} 

        Before writing the cover letter, create a plan for its structure:
        1. Outline the key points for each paragraph.
        2. Ensure the plan aligns with the cover letter's purpose described earlier.
        3. Respond with the plan without calling any functions.
    """
    response = chat.send_message(next_command)

    # Step 3: Generate Cover Letter Text
    next_command = f"""
        Based on the plan you created, write the coverletter in this format:

        Dear Hiring Manager,

        [Body of the letter]

        Sincerely,
        [Applicant information]

        - Do not include any placeholders such as [Hiring Manager Name], [Platform where you saw the ad], etc.
        - Use professional but common language. Avoid overly formal or rarely used words.
        - Use only information sourced from the provided data. Do not hallucinate or fabricate any information.
        - Keep the cover letter concise and within 2-5 paragraphs.
        - Maintain alignment with the purpose described earlier.

        Reply with a draft of the coverletter, do not call a function.
    """
    response = chat.send_message(next_command)

    next_command = f"""
        Review your draft and ensure it meets all of the following criteria:
        
        - Do not include any placeholders such as [Hiring Manager Name], [Platform where you saw the ad], etc.
        - Use professional but common language. Avoid overly formal or rarely used words.
        - Use only information sourced from the provided data. Do not hallucinate or fabricate any information.
        - Keep the cover letter concise and within 2-5 paragraphs.
        - Maintain alignment with the purpose described earlier.

        Call the function 'set_cover_letter_text' and pass the final draft as the text parameter.
    """
    response = chat.send_message(next_command)

    return COVER_LETTER_DATA

# Validation and Rewrite Function
def validate_and_rewrite_cover_letter(chat):
    """
    Validate the generated cover letter text and handle placeholders if present.
    """
    global COVER_LETTER_DATA
    text = COVER_LETTER_DATA.get("text", "")

    # Check for placeholders
    if "[" in text or "]" in text:
        next_command = """
            The generated cover letter contains potential placeholders (e.g., [Hiring Manager Name], [Insert X here]).
            Rewrite the cover letter to ensure it is fully ready to submit without requiring changes. 
            Strictly avoid any placeholders or incomplete sections.
        """
        response = chat.send_message(next_command)
        COVER_LETTER_DATA["text"] = response.get("text", text)  # Update text only if the response provides one

# AI Tools
def set_cover_letter_name_and_purpose(name:str, purpose:str):
    """
    Sets the name and purpose of the cover letter you are currently creating.
    Args:
        name: The name of this cover letter, keep it very short.
        purpose: A very brief description of what this cover letter will be used for, 1-2 sentences.
    """
    global COVER_LETTER_DATA

    if not name or not purpose:
        raise ValueError("Name and Purpose are required")

    COVER_LETTER_DATA['name'] = name
    COVER_LETTER_DATA['purpose'] = purpose

def set_cover_letter_text(text:str):
    """
    Sets the text of the cover letter you are currently creating.
    Args:
        text: The body of the cover letter, the actual cover letter itself.
    """
    global COVER_LETTER_DATA

    if not text:
        raise ValueError("Text is required")

    COVER_LETTER_DATA['text'] = text
