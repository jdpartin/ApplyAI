from myapp.library.aiworkflows.generate_jobsearchstring import ai_generate_jobsearchstring_workflow
from myapp.library.api_managers.adzuna import AdzunaAPIManager
from myapp.library.api_managers.sovren import SovrenAPIManager
from myapp.library import resume


# This file was generated by ChatGPT and isnt complete
# Still need to work out the flow for creating the general and tailored resumes and passing them as structured plain text


def job_tournament_workflow(request):
    """
    Uses a tournament-like workflow to find the most relevant jobs to present to the user.
    """
    # Use AI to generate a job search string (A string of the user's skills and qualified position titles)
    job_search_string = ai_generate_jobsearchstring_workflow(request)

    # Find a batch of relevant jobs using a job search API
    job_search_manager = AdzunaAPIManager()
    job_api_response = job_search_manager.search_jobs(query=job_search_string, results_per_page=20)
    job_list = job_search_manager.extract_job_data(job_api_response)

    # Initialize the ATS manager
    ats_manager = SovrenAPIManager()

    # Applicant's general resume (assume it's fetched from the user's profile)
    applicant_resume = request.user.profile.general_resume_text

    # Filter jobs with a 70%+ ATS match using the general resume
    high_match_jobs = []
    for job in job_list:
        job_description = job.get("description")
        if not job_description:
            continue

        # Get the ATS score for the general resume
        ats_result = ats_manager.get_score(job_description, applicant_resume)
        if ats_result.get("error"):
            continue

        score = ats_result.get("Value", {}).get("TotalScore", 0)
        if score >= 70:
            high_match_jobs.append(job)

    # Create tailored resumes and reapply ATS for jobs with 70%+ match
    final_jobs = []
    for job in high_match_jobs:
        job_description = job.get("description")

        # Generate a tailored resume for the job
        # add_or_update_resume(request, data=None):
        tailored_resume = generate_tailored_resume(applicant_resume, job_description)

        # Get the ATS score for the tailored resume
        ats_result = ats_manager.get_score(job_description, tailored_resume)
        if ats_result.get("error"):
            continue

        score = ats_result.get("Value", {}).get("TotalScore", 0)
        if score >= 90:
            final_jobs.append({**job, "match_score": score})

    # Return the final list of jobs with 90%+ match
    return {
        "status": "success",
        "data": final_jobs,
    }
